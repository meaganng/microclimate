summary(modelLST_zmax)
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
modelLST_CC_zmax = lm(LST ~ CC + zmax, data = lidr_points) # model is complete, no more significant predictors
pairs(~ CC + zmax, data = lidr_points) # check to see correlation
#Display a summary of the model
summary(modelLST_CC_zmax)
#Fit a empty model
modelLST_CC_zmax = lm(LST ~ 1, data = lidr_points)
#Now, add in one variable at time, and select the most significant
add1(modelLST_CC_zmax,~ CC + zskew + zmax + zkurt, test = 'F')
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
modelLST_CC_zmax = lm(LST ~ CC + zmax , data = lidr_points)
#Display a summary of the model with the predictors
summary(modelLST_CC_zmax)
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
modelLST_CC_zmax = lm(LST ~ CC + zmax, data = lidr_points) # model is complete, no more significant predictors
pairs(~ CC + zmax, data = lidr_points) # check to see correlation
#Display a summary of the model
summary(modelLST_CC_zmax)
# Plot Total_AGB and fitted values
plot(modelLST_CC_zmax ~ model$fitted.values,data = data_table,xlab = 'Predicted', ylab = 'Measured', main = "Total_AGB")
# Plot Total_AGB and fitted values
plot(modelLST_CC_zmax ~ model$fitted.values,data = lidr_points,xlab = 'Predicted', ylab = 'Measured', main = "Total_AGB")
# Plot Total_AGB and fitted values
plot(modelLST_CC_zmax ~ model$fitted.values,data = lidr_points, xlab = 'Predicted', ylab = 'Measured', main = "Total_AGB")
# Plot Total_AGB and fitted values
plot(modelLST_CC_zmax ~ modelLST_CC_zmax$fitted.values,data = lidr_points, xlab = 'Predicted', ylab = 'Measured', main = "Total_AGB")
View(modelLST_CC_zmax)
# Plot Total_AGB and fitted values
plot(LST ~ modelLST_CC_zmax$fitted.values,data = lidr_points, xlab = 'Predicted', ylab = 'Measured', main = "Total_AGB")
abline(0,1)
#### Read in data ####
lidardata <- readLAScatalog("data/LAS")
library(raster)
library(terra)
library(sf)
#### Read in data ####
lidardata <- readLAScatalog("data/LAS")
las_check(lidardata) # Inspect lidardata
summary(lidardata) # Summary of lidardata
plot(lidardata) # Plot lidardata
# Create DEM to use to normalize the data
UBC_DEM <- grid_terrain(lidardata, 2, tin()) # Using spatial interpolation to create DEM
#Create color palatte
col_1 <- height.colors(50) # Assign a colour palatte
#Plot DEM using color palatte
plot(UBC_DEM, col = col_1) # Plot in 2D
# Define LAScatalog engine options
opt_output_files(lidardata) <- ("Normalized/norm_ubcbg_{ID}") # Setting directory for where the file will go
# Normalize all tiles in lidardata with the DEM
norm_tiles_ubcbg <- normalize_height(lidardata, UBC_DEM)
# Check to see if the normalization worked
norm_ubcbg_1 <- readLAS(here("data/Normalized/norm_ubcbg_1.las")) # Read in the normalized tiles of norm_ubcbg
ctg <- catalog(here("data/Normalized"))
my_metrics <- grid_metrics(ctg, .stdmetrics_z, res = 2)
my_metrics <- terra::rast(my_metrics)
terra::writeRaster(my_metrics,
filename = file.path("data/Z_METRICS",
paste0(names(my_metrics), ".tif")),
overwrite = TRUE)
cover <- my_metrics$pzabove2
plot(cover)
lidr_data <- read.csv(here("data/points/lidrmetrics_working.csv"))
dim(lidr_data)
names(lidr_data)
#subset "zq95" from grid_metrics_afrf RasterBrick
CC_norm_r <- subset(norm_tiles_ubcbg, "CC")
#subset "zq95" from grid_metrics_afrf RasterBrick
CC_norm_r <- subset(cover, "CC")
#subset "zq95" from grid_metrics_afrf RasterBrick
CC_norm_r <- subset(lidr_points, "CC")
#Display a summary of the model
summary(modelLST_CC_zmax)
modelLST_CC_zmax
#subset "zq95" from grid_metrics_afrf RasterBrick
zmax_cc_r <- subset(my_metrics, "zmax")
plot(zmax_cc_r)
#subset "zkurt" from grid_metrics_afrf RasterBrick
zkurt_cc_r <- subset(my_metrics, "pzabove2")
plot(zkurt_cc_r)
#Create function from model LST coefficients
f <- function(a,b){
(-0.007739*a) + (-0.042072*b) +  61.789425
}
plot(total_cc_zmax)
#Apply function to raster model Total_AGB
total_cc_zmax <- overlay(zmax_cc_r, zkurt_cc_r, fun = f)
#Apply function to raster model Total_AGB
total_cc_zmax <- overlay(zmax_cc_r, zkurt_cc_r, fun = f)
#Create function from model LST coefficients
f <- function(a,b){
(-0.007739*a) + (-0.042072*b) +  61.789425
}
#Apply function to raster model Total_AGB
total_cc_zmax <- overlay(zmax_cc_r, zkurt_cc_r, fun = f)
#subset "zkurt" from grid_metrics_afrf RasterBrick
cc_r <- subset(my_metrics, "pzabove2")
plot(cc_r)
#Create function from model LST coefficients
f <- function(a,b){
(-0.007739*a) + (-0.042072*b) +  61.789425
}
#Apply function to raster model Total_AGB
total_cc_zmax <- overlay(zmax_cc_r, cc_r, fun = f)
plot(total_cc_zmax)
cc_r
View(my_metrics)
#Fit a empty model
modelLST_CC = lm(LST ~ 1, data = lidr_points)
#Now, add in one variable at time, and select the most significant
add1(modelLST_CC,~ CC + zskew + zmax + zkurt, test = 'F')
#Fit a empty model
modelLST_zmax = lm(LST ~ 1, data = lidr_points)
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
modelLST_zmax = lm(LST ~ zmax , data = lidr_points)
#Display a summary of the model with the predictors
summary(modelLST_zmax)
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
modelLST_CC_zmax = lm(LST ~ CC + zmax, data = lidr_points) # model is complete, no more significant predictors
pairs(~ CC + zmax, data = lidr_points) # check to see correlation
pairs(~ LST + CC + zmax, data = lidr_points) # check to see correlation
#Display a summary of the model
summary(modelLST_CC_zmax)
# Plot Total_AGB and fitted values
plot(LST ~ modelLST_CC_zmax$fitted.values,data = lidr_points, xlab = 'Predicted', ylab = 'Measured', main = "LST")
abline(0,1)
#subset "zq95" from grid_metrics_afrf RasterBrick
zmax_cc_r <- subset(my_metrics, "zmax")
plot(zmax_cc_r)
#subset "zkurt" from grid_metrics_afrf RasterBrick
cc_r <- subset(my_metrics, "pzabove2")
plot(cc_r)
#Create function from model LST coefficients
f <- function(a,b){
(-0.007739*a) + (-0.042072*b) +  61.789425
}
#Apply function to raster model Total_AGB
total_cc_zmax <- overlay(zmax_cc_r, cc_r, fun = f)
#Apply function to raster model Total_AGB
total_cc_zmax <- f(zmax_cc_r, cc_r)
plot(total_cc_zmax)
plot(cc_r)
lidr_data <- read.csv(here("data/points/lidrmetrics_working.csv"))
View(lidr_data)
plot(lidardata)
garden <- read_sf("data/Polygons/CuratorialMap_bed_polygons_dissolved.shp")
View(garden)
View(lidr_data)
asian_garden <- readOGR("data/Polygons/asian_garden.shp")
asian_garden <- st_read("data/Polygons/asian_garden.shp")
View(asian_garden)
cropped_cc <- terra::crop(cc_r, asian_garden)
asian_garden <- vect(st_read("data/Polygons/asian_garden.shp"))
cropped_cc <- terra::crop(cc_r, asian_garden)
# Plot Total_AGB and fitted values
plot(LST ~ modelLST_CC_zmax$fitted.values,data = lidr_points, xlab = 'Predicted', ylab = 'Measured', main = "LST")
abline(0,1)
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
modelLST_CC_zmax = lm(LST ~ CC + zmax, data = lidr_points) # model is complete, no more significant predictors
pairs(~ LST + CC + zmax, data = lidr_points) # check to see correlation
#Display a summary of the model
summary(modelLST_CC_zmax)
# Plot Total_AGB and fitted values
plot(LST ~ modelLST_CC_zmax$fitted.values,data = lidr_points, xlab = 'Predicted', ylab = 'Measured', main = "LST")
abline(0,1)
asian_garden <- vect(st_read("data/Polygons/asian_garden.shp"))
cropped_cc <- terra::crop(cc_r, asian_garden)
masked_cc <- terra::mask(cropped_cc, asian_garden)
plot(masked_cc)
geom(cc_r)
crds(cc_r)
cc_r
project(cc_r,lidr_data)
project(lidr,"espg:3157")
project(lidr_points,"espg:3157")
project(lidr_points,"espg:3157")
#n_garden <- vect(st_read("data/Polygons/asian_garden.shp"))asia
lst_pointdata <- st_read("data/final_plz/final_plz.shp")
View(lst_pointdata)
#Fit a empty model
modelLST_zmax = lm(RASTERVALU ~ 1, data = lst_pointdata)
#Now, add in one variable at time, and select the most significant
add1(modelLST_zmax,~ CC + zskew + zmax + zkurt, test = 'F')
#Now, add in one variable at time, and select the most significant
add1(modelLST_zmax,~ CANOPYAREA, test = 'F')
#Display a summary of the model with the predictors
summary(modelLST_zmax)
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
modelLST_zmax = lm(RASTERVALU~ CANOPYAREA , data = lst_pointdata)
#Display a summary of the model with the predictors
summary(modelLST_zmax)
# Plot Total_AGB and fitted values
plot(LST ~ modelLST_CC_zmax$fitted.values,data = lidr_points, xlab = 'Predicted', ylab = 'Measured', main = "LST")
abline(0,1)
# Plot Total_AGB and fitted values
plot(RASTERVALU ~ modelLST_CC_zmax$fitted.values,data = lidr_points, xlab = 'Predicted', ylab = 'Measured', main = "LST")
# Plot Total_AGB and fitted values
plot(RASTERVALU ~ modelLST_CC_zmax$fitted.values,data = lst_pointdatas, xlab = 'Predicted', ylab = 'Measured', main = "LST")
# Plot Total_AGB and fitted values
plot(RASTERVALU ~ modelLST_CC_zmax$fitted.values,data = lst_pointdata, xlab = 'Predicted', ylab = 'Measured', main = "LST")
# Plot Total_AGB and fitted values
plot(RASTERVALU ~ modelLST_zmax$fitted.values,data = lst_pointdata, xlab = 'Predicted', ylab = 'Measured', main = "LST")
abline(0,1)
#Create function from model LST coefficients
f <- function(a){
(-0.0039243  *a) + 60.0901605
}
#Apply function to raster model Total_AGB
total_cc_zmax <- f(modelLST_zmax)
random100points <- st_read("data/final_plz/random100points.shp")
random100points <- st_read("data/final_plz/random100point.shp")
lst_pointdata <- st_read("data/final_plz/final_plz.shp")
library(car)
pairs(~ RASTERVALU + CANOPYAREA, data = lst_pointdata) # check to see correlation
#Display a summary of the model
summary(modelLST_CC)
# Plot Total_AGB and fitted values
plot(RASTERVALU ~ modelLST_CC$fitted.values,data = lst_pointdata, xlab = 'Predicted', ylab = 'Measured', main = "LST")
#Fit a empty model
modelLST_CC= lm(RASTERVALU ~ 1, data = lst_pointdata) # rastervalu is the LST
#Now, add in one variable at time, and select the most significant
add1(modelLST_CC,~ CANOPYAREA, test = 'F')
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
modelLST_CC = lm(RASTERVALU~ CANOPYAREA , data = lst_pointdata)
#Display a summary of the model with the predictors
summary(modelLST_CC)
pairs(~ RASTERVALU + CANOPYAREA, data = lst_pointdata) # check to see correlation
#Display a summary of the model
summary(modelLST_CC)
# Plot Total_AGB and fitted values
plot(RASTERVALU ~ modelLST_CC$fitted.values,data = lst_pointdata, xlab = 'Predicted', ylab = 'Measured', main = "LST")
abline(0,1)
abline(0,1, col = "red")
View(lst_pointdata)
HERE()
here()
randompointdata <- st_read("data/pointoutput/randompointdata.shp")
View(randompointdata)
#Fit a empty model
model1= lm(lstvalue ~ 1, data = randompointdata) # rastervalu is the LST
#Now, add in one variable at time, and select the most significant
add1(model1,~ pzabove2va, test = 'F')
#Now, add in one variable at time, and select the most significant
add1(model1,~ pzabove2va + zkurtvalue + zmaxvalue + zskewvalue, test = 'F')
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
model1 = lm(model1 ~ pzabove2va + zmaxvalue , data = randompointdata)
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
model1 = lm(model1 ~ pzabove2va + zmaxvalue, data = randompointdata)
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
model1 = lm(model1 ~ pzabove2va + zmaxvalue, data = randompointdata)
#Fit a empty model
model1= lm(lstvalue ~ 1, data = randompointdata) # rastervalu is the LST
#Now, add in one variable at time, and select the most significant
add1(model1,~ pzabove2va + zkurtvalue + zmaxvalue + zskewvalue, test = 'F')
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
model1 = lm(model1 ~ pzabove2va + zmaxvalue, data = randompointdata)
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
model1 = lm(model1 ~ pzabove2va, data = randompointdata)
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
model1 = lm(lstvalue ~ pzabove2va + zmaxvalue, data = randompointdata)
#Display a summary of the model with the predictors
summary(model1)
pairs(~ lstvalue + pzabove2va + zmaxvalue, data = randompointdata) # check to see correlation
#Display a summary of the model
summary(model1)
abline(0,1, col = "red")
# Plot Total_AGB and fitted values
plot(lstvalue ~ model1$fitted.values,data = lst_pointdata, xlab = 'Predicted', ylab = 'Measured', main = "LST")
abline(0,1, col = "red")
# Plot Total_AGB and fitted values
plot(model1 ~ model1$fitted.values,data = lst_pointdata, xlab = 'Predicted', ylab = 'Measured', main = "LST")
# Plot Total_AGB and fitted values
plot(lstvalue ~ model1$fitted.values,data = lst_pointdata, xlab = 'Predicted', ylab = 'Measured', main = "LST")
View(lst_pointdata)
# Plot Total_AGB and fitted values
plot(randompointdata$lstvalue ~ model1$fitted.values, xlab = 'Predicted', ylab = 'Measured', main = "LST")
abline(0,1, col = "red")
)
#Display a summary of the model
summary(model1)
#Display a summary of the model with the predictors
summary(model1)
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
model1 = lm(lstvalue ~ pzabove2va + zmaxvalue, data = randompointdata)
#Display a summary of the model with the predictors
summary(model1)
pairs(~ lstvalue + pzabove2va + zmaxvalue, data = randompointdata) # check to see correlation
randompoints0 <- st_read("data/randompoints/randompoints0.shp")
randompointsabove0 <- st_read("data/randompoints/randompointsabove0.shp")
t.test(randompoints0, randompointsabove0, alternative = "two.sided", var.equal = FALSE)
ttestcsv <- read.csv(here("data/ttestcsv.csv"))
here()
ttestcsv <- read.csv(here("data/ttestrandompoints.csv"))
ttestcsv <- read.csv(here("data/ttestrandompoints.csv"))
t.test(ttestcsv$above0, ttestcsv$X0, alternative = "two.sided", var.equal = FALSE)
#Display a summary of the model
summary(model1)
RStudio.Version()
randompointdata <- st_read("data/pointoutput/randompointdata.shp")
##### Install and/or load packages ####
library(lidR)
library(tidyverse)
library(here)
library(raster)
library(terra)
library(sf)
library(car)
randompointdata <- st_read("data/pointoutput/randompointdata.shp")
#Fit a empty model
model1= lm(lstvalue ~ 1, data = randompointdata) # rastervalu is the LST
#Now, add in one variable at time, and select the most significant
add1(model1,~ pzabove2va + zkurtvalue + zmaxvalue + zskewvalue, test = 'F')
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
model1 = lm(lstvalue ~ pzabove2va + zmaxvalue, data = randompointdata)
#Display a summary of the model with the predictors
summary(model1)
pairs(~ lstvalue + pzabove2va + zmaxvalue, data = randompointdata) # check to see correlation
#Display a summary of the model
summary(model1)
# Plot Total_AGB and fitted values
plot(randompointdata$lstvalue ~ model1$fitted.values, xlab = 'Predicted', ylab = 'Measured', main = "LST")
abline(0,1, col = "red")
model1
#Now, add in one variable at time, and select the most significant
add1(model1,~ pzabove2va + zkurtvalue + zmaxvalue + zskewvalue, test = 'F')
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
model1 = lm(lstvalue ~ pzabove2va + zmaxvalue, data = randompointdata)
#Display a summary of the model with the predictors
summary(model1)
pairs(~ lstvalue + pzabove2va + zmaxvalue, data = randompointdata) # check to see correlation
ttestcsv <- read.csv(here("data/ttestrandompoints.csv"))
t.test(ttestcsv$above0, ttestcsv$X0, alternative = "two.sided", var.equal = FALSE)
##### Install and/or load packages ####
library(lidR)
library(tidyverse)
library(here)
library(raster)
library(terra)
library(sf)
library(car)
randompointdata <- st_read("data/pointoutput/randompointdata.shp")
#Fit a empty model
model1= lm(lstvalue ~ 1, data = randompointdata) # rastervalu is the LST
#Now, add in one variable at time, and select the most significant
add1(model1,~ pzabove2va + zkurtvalue + zmaxvalue + zskewvalue, test = 'F')
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
model1 = lm(lstvalue ~ pzabove2va + zmaxvalue, data = randompointdata)
#Display a summary of the model with the predictors
summary(model1)
pairs(~ lstvalue + pzabove2va + zmaxvalue, data = randompointdata) # check to see correlation
#Display a summary of the model
summary(model1)
# Plot Total_AGB and fitted values
plot(randompointdata$lstvalue ~ model1$fitted.values, xlab = 'Predicted', ylab = 'Measured', main = "LST")
abline(0,1, col = "red")
#Create function from model LST coefficients
f <- function(a,b){
(-0.007739 *a) + (-0.042072*b) + 61.789420
}
ttestcsv <- read.csv(here("data/ttestrandompoints.csv"))
# Plot Total_AGB and fitted values
plot(randompointdata$lstvalue ~ model1$fitted.values, xlab = 'Predicted', ylab = 'Measured', main = "LST with LiDAR metrics pzabove2 and zmax")
abline(0,1, col = "red")
##### Install and/or load packages ####
library(lidR)
library(tidyverse)
library(here)
library(raster)
library(terra)
library(sf)
library(car)
#### Read in data ####
lidardata <- readLAScatalog("data/LAS")
las_check(lidardata) # Inspect lidardata
summary(lidardata) # Summary of lidardata
plot(lidardata) # Plot lidardata
# Create DEM to use to normalize the data
UBC_DEM <- grid_terrain(lidardata, 2, tin()) # Using spatial interpolation to create DEM
randompointdata <- st_read("data/pointoutput/randompointdata.shp")
#Fit a empty model
model1= lm(lstvalue ~ 1, data = randompointdata) # rastervalu is the LST
#Now, add in one variable at time, and select the most significant
add1(model1,~ pzabove2va + zkurtvalue + zmaxvalue + zskewvalue, test = 'F')
#Now, add in one variable at time, and select the most significant
add1(model1,~ pzabove2va + zkurtvalue + zmaxvalue + zskewvalue, test = 'F')
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
model1 = lm(lstvalue ~ pzabove2va + zmaxvalue, data = randompointdata)
#Display a summary of the model with the predictors
summary(model1)
pairs(~ lstvalue + pzabove2va + zmaxvalue, data = randompointdata) # check to see correlation
#Display a summary of the model
summary(model1)
model2= lm(lstvalue ~ 1, data = randompointdata) # rastervalu is the LST
#Now, add in one variable at time, and select the most significant
add1(model2,~ pzabove2va + zkurtvalue + zmaxvalue + zskewvalue, test = 'F')
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
model2 = lm(lstvalue ~ pzabove2va, data = randompointdata)
#Display a summary of the model with the predictors
summary(model2)
pairs(~ lstvalue + pzabove2va, data = randompointdata) # check to see correlation
model3= lm(lstvalue ~ 1, data = randompointdata) # rastervalu is the LST
#Now, add in one variable at time, and select the most significant
add1(model3,~ pzabove2va + zkurtvalue + zmaxvalue + zskewvalue, test = 'F')
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
model3 = lm(lstvalue ~ zmaxvalue, data = randompointdata)
#Display a summary of the model with the predictors
summary(model3)
pairs(~ lstvalue + zmaxvalue, data = randompointdata) # check to see correlation
#Display a summary of the model
summary(model3)
corr(randompointdata)
?corr
cor(randompointdata)
corr.matrix(randompointdata)
cor.matrix(randompointdata)
corR(randompointdata)
corr(randompointdata)
correlation(randompointdata)
corr(randompointdata)
findCorrelation(randompointdata)
cor(randompointdata)
View(randompointdata)
cor(pzabove2va)
>cor
?cor
cor(randompointdata$pzabove2va, randompointdata$zmaxvalue)
##### Install and/or load packages ####
library(lidR)
library(tidyverse)
library(here)
library(raster)
library(terra)
library(sf)
library(car)
randompointdata <- st_read("data/pointoutput/randompointdata.shp")
#Fit a empty model
model1= lm(lstvalue ~ 1, data = randompointdata) # rastervalu is the LST
#Now, add in one variable at time, and select the most significant
add1(model1,~ pzabove2va + zkurtvalue + zmaxvalue + zskewvalue, test = 'F')
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
model1 = lm(lstvalue ~ pzabove2va + zmaxvalue, data = randompointdata)
#Display a summary of the model with the predictors
summary(model1)
pairs(~ lstvalue + pzabove2va + zmaxvalue, data = randompointdata) # check to see correlation
#Display a summary of the model
summary(model1)
# Plot Total_AGB and fitted values
plot(randompointdata$lstvalue ~ model1$fitted.values, xlab = 'Predicted', ylab = 'Measured', main = "LST")
abline(0,1, col = "red")
View(model1)
# Plot Total_AGB and fitted values
plot(randompointdata$lstvalue ~ model1$fitted.values, xlab = 'Predicted', ylab = 'Measured', main = "Land Surface Model Results")
abline(0,1, col = "red")
#Display a summary of the model
summary(model1)
##### Install and/or load packages ####
library(lidR)
library(tidyverse)
library(here)
library(raster)
library(terra)
library(sf)
library(car)
randompointdata <- st_read("data/pointoutput/randompointdata.shp")
#Fit a empty model
model1= lm(lstvalue ~ 1, data = randompointdata) # rastervalu is the LST
#Now, add in one variable at time, and select the most significant
add1(model1,~ pzabove2va + zkurtvalue + zmaxvalue + zskewvalue, test = 'F')
#Fit a linear model using multiple predictors (separating the predictors by '+' sign)
model1 = lm(lstvalue ~ pzabove2va + zmaxvalue, data = randompointdata)
#Display a summary of the model with the predictors
summary(model1)
pairs(~ lstvalue + pzabove2va + zmaxvalue, data = randompointdata) # check to see correlation
#Display a summary of the model
summary(model1)
# Plot Total_AGB and fitted values
plot(randompointdata$lstvalue ~ model1$fitted.values, xlab = 'Predicted', ylab = 'Measured', main = "LST Modelled Against Canopy Cover and Maximum Height")
abline(0,1, col = "red")
randompointdata <- st_read("data/randompointdata.shp") # Read in 100 random points data
library(here)
library(raster)
library(terra)
library(sf)
randompointdata <- st_read("data/randompointdata.shp") # Read in 100 random points data
randompointdata <- st_read("data/randompointdata.shp") # Read in 100 random points data
randompointdata <- st_read("data/randompointdata.shp") # Read in 100 random points data
randompointdata <- st_read("data/randompointdata.shp") # Read in 100 random points data
library(here)
library(sf)
randompointdata <- st_read("data/randompointdata.shp") # Read in 100 random points data
randompointdata <- st_read("data/randompointdata.shp") # Read in 100 random points data
randompointdata <- st_read("data/randompointdata.shp") # Read in 100 random points data
library(here)
library(raster)
library(terra)
library(sf)
library(car)
randompointdata <- st_read("data/randompointdata.shp") # Read in 100 random points data
# Fit a empty model
model1= lm(lstvalue ~ 1, data = randompointdata) # rastervalu is the LST
# Now, add in one variable at time, and select the most significant
add1(model1,~ pzabove2va + zkurtvalue + zmaxvalue + zskewvalue, test = 'F')
# Fit a linear model using multiple predictors (separating the predictors by '+' sign)
model1 = lm(lstvalue ~ pzabove2va + zmaxvalue, data = randompointdata)
#Display a summary of the model with the predictors
summary(model1)
pairs(~ lstvalue + pzabove2va + zmaxvalue, data = randompointdata) # Check to see correlation
#Display a summary of the model
summary(model1)
# Plot LST and fitted values
plot(randompointdata$lstvalue ~ model1$fitted.values, xlab = 'Predicted', ylab = 'Measured', main = "LST Modelled Against Canopy Cover and Maximum Height")
abline(0,1, col = "red")
